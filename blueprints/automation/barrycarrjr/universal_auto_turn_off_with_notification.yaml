blueprint:
  name: Universal Auto Turn Off (Switch, Light, Boolean, Climate)
  description: >
    Automatically turns off any switch, light, input_boolean, or climate entity
    after it has been active for a specified duration. Optionally sends a notification
    5 minutes before shutoff. No timer helpers or YAML edits required.
  domain: automation
  input:
    target_entity:
      name: Target Entity
      description: Entity to monitor and turn off
      selector:
        entity:
          domain:
            - switch
            - light
            - input_boolean
            - climate

    max_on_duration:
      name: Max On Duration
      description: Time before entity should be turned off
      default: "01:00:00"
      selector:
        duration:

    enable_notification:
      name: Enable Pre-Shutoff Notification
      description: Sends a notification 5 minutes before automatic turn-off
      default: false
      selector:
        boolean:

    notify_service:
      name: Notification Service
      description: e.g., notify.mobile_app_pixel_8
      default: ""
      selector:
        text:

    notify_message:
      name: Notification Message
      description: Message sent before shutoff (supports `{{ entity_name }}`)
      default: "⚠️ {{ entity_name }} will be turned off in 5 minutes."
      selector:
        text:

mode: restart

variables:
  entity_id: !input target_entity
  max_on_duration: !input max_on_duration
  notify_enabled: !input enable_notification
  notify_service: !input notify_service
  notify_message: !input notify_message
  entity_name: "{{ state_attr(entity_id, 'friendly_name') or entity_id }}"
  entity_domain: "{{ entity_id.split('.')[0] }}"

trigger:
  - platform: state
    entity_id: !input target_entity
    to:
      - "on"
      - "heat"
      - "cool"
      - "auto"
      - "idle"

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ notify_enabled and notify_service != '' }}"
        sequence:
          - delay:
              seconds: >
                {{ (as_timedelta(max_on_duration) - timedelta(minutes=5)).total_seconds() | int }}
          - service: "{{ notify_service }}"
            data:
              message: "{{ notify_message }}"

  - delay: "{{ max_on_duration }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(entity_id) in ['on', 'heat', 'cool', 'auto', 'idle'] }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ entity_domain in ['switch', 'light', 'input_boolean'] }}"
                sequence:
                  - service: "{{ entity_domain }}.turn_off"
                    target:
                      entity_id: "{{ entity_id }}"
              - conditions:
                  - condition: template
                    value_template: "{{ entity_domain == 'climate' }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: "{{ entity_id }}"
                    data:
                      hvac_mode: "off"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notify_service != '' }}"
                sequence:
                  - service: "{{ notify_service }}"
                    data:
                      message: "✅ {{ entity_name }} has been automatically turned off."